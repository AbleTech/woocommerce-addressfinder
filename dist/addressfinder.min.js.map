{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/mutation_manager.js","webpack:///./src/form_manager.js","webpack:///./src/page_manager.js","webpack:///./src/address_form_config/region_mappings.js","webpack:///./src/address_form_config/billing_address.js","webpack:///./src/address_form_config/shipping_address.js","webpack:///./src/address_form_config/block_shipping_address.js","webpack:///./src/address_form_config/block_billing_address.js","webpack:///./src/address_form_config/find_block_checkout_ids.js","webpack:///./src/woocommerce_plugin.js","webpack:///./src/config_manager.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","MutationManager","widgetConfig","mutationEventHandler","ignoredClass","this","millisecondsToIgnoreMutations","maxMutationTimeoutCount","mutationTimeoutCount","monitorMutations","window","MutationObserver","_mutationHandler","observe","document","body","childList","subtree","addEventListener","_domNodeModifiedHandler","console","info","mutations","reduce","nodes","mutation","target","classList","contains","concat","addedNodes","removedNodes","find","node","_setMutationTimeout","event","className","includes","relatedNode","_mutationTimeout","_monitorExcessiveMutations","clearTimeout","setTimeout","_log","message","data","undefined","debug","log","FormManager","formHelperConfig","formFieldChangeEventToDispatch","countryChangeEventToListenFor","widgets","countryCodes","_bindToForm","widgetCountryCode","label","disable","destroy","countryElement","removeEventListener","boundCountryChangedListener","nzWidget","AddressFinder","Widget","searchElement","nzKey","nzWidgetOptions","on","_nzAddressSelected","auWidget","auKey","auWidgetOptions","_auAddressSelected","intWidget","_intAddressSelected","_countryChanged","_setActiveCountry","defaultCountry","activeCountry","nz","countryValue","au","countryCode","values","forEach","widget","enable","setCountry","elements","combined","filter","element","length","join","fullAddress","metaData","selected","NZSelectedAddress","address_line_2","suburb","_setElementValue","address_line_1","address_line_1_and_2","_combineAddressElements","city","postcode","regionMappings","translatedRegionValue","region","locality_name","stateMappings","translatedStateValue","state_territory","address","state","elementName","previousValue","tracker","_valueTracker","setValue","_dispatchEvent","errorMessage","warn","Event","createEvent","initEvent","dispatchEvent","PageManager","addressFormConfigurations","version","formHelpers","countryElementWasPresent","identifiedFormHelperConfig","reload","loadFormHelpers","_areAllElementsStillInTheDOM","_newFormsIdentified","formHelper","identifiedAddressFormConfigurations","_identifyAddressForms","_initialiseFormHelper","config","currentCountryCode","countryElementValue","getCountryValue","every","_identifyingElementsPresentAndVisible","_getCurrentCountryValue","_areAllElementsStillInTheDOMForCountryCode","filteredElements","entries","optionalElements","requiredElements","_ignoreOptionalNullElements","addressFormConfig","layoutSelectors","selector","querySelector","style","display","push","identifiedForms","searchIdentifier","HTMLInputElement","countryIdentifier","address1","address2","int","helper","state_field","Array","from","querySelectorAll","map","el","val","FindBlockCheckoutIds","shippingCountry","_getElementId","shippingState","billingCountry","billingState","configuration","parentId","parent","getElementById","inputs","getElementsByTagName","id","w","WooCommercePlugin","ConfigManager","shippingAddress","billingAddress","blockShippingAddress","blockBillingAddress","findElements","_initPlugin","addressfinderDebugMode","_initOnDOMLoaded","load","jsonObject","JSON","parse","e","AddressFinderConfig","alert","repetitions","readyState","parsedWidgetOptions","_safeParseJSONObject","widget_options","parsedNZWidgetOptions","nz_widget_options","parsedAUWidgetOptions","au_widget_options","key_nz","key_au","default_country","_setVersionNumbers","_woocommercePlugin","createElement","src","async","onload","appendChild"],"mappings":"aACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QAKfF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,GAIjBlC,EAAoBA,EAAoBmC,EAAI,G,09BClFhCC,E,WACnB,cAAgE,IAAnDC,EAAmD,EAAnDA,aAAcC,EAAqC,EAArCA,qBAAsBC,EAAe,EAAfA,c,4FAAe,SAC9DC,KAAKH,aAAeA,EACpBG,KAAKF,qBAAuBA,EAG5BE,KAAKD,aAAeA,EAEpBC,KAAKC,8BAAgC,IAGrCD,KAAKE,wBAA0B,GAE/BF,KAAKG,qBAAuB,EAE5BH,KAAKI,mB,kEAKDC,OAAOC,iBAEM,IAAIA,iBAAiBN,KAAKO,iBAAiBnB,KAAKY,OACtDQ,QAAQC,SAASC,KAAM,CAACC,WAAW,EAAMC,SAAS,IAElDP,OAAOQ,kBAEhBJ,SAASC,KAAKG,iBAAiB,kBAAmBb,KAAKc,wBAAwB1B,KAAKY,OAAO,GAC3FS,SAASC,KAAKG,iBAAiB,iBAAkBb,KAAKc,wBAAwB1B,KAAKY,OAAO,IAEpFK,OAAOU,SACTA,QAAQC,KAAK,4D,uCASJC,GAAU,WACJA,EAAUC,QAAO,SAACC,EAAOC,GAE5C,OAAIA,EAASC,QAAUD,EAASC,OAAOC,WAAaF,EAASC,OAAOC,UAAUC,SAAS,EAAKxB,cACnFoB,EAGFA,EAAMK,OAAN,EAAiBJ,EAASK,aAAaD,OAAvC,EAAkDJ,EAASM,iBACjE,IAEoCC,MAAK,SAACC,GAC3C,QAASA,EAAKN,WAAaM,EAAKN,UAAUC,SAAS,EAAKxB,mBAO1DC,KAAK6B,wB,8CAOiBC,GACjBA,EAAMT,OAAOU,WAAaD,EAAMT,OAAOU,UAAUC,SAAShC,KAAKD,eAC/D+B,EAAMG,aAAeH,EAAMG,YAAYF,WAAaD,EAAMG,YAAYF,UAAUC,SAAShC,KAAKD,eAInGC,KAAK6B,wB,4CAID7B,KAAKkC,mBAGPlC,KAAKmC,6BAELC,aAAapC,KAAKkC,mBAIpBlC,KAAKkC,iBAAmBG,WAAW,WAEjCrC,KAAKG,qBAAuB,EAC5BH,KAAKF,wBACLV,KAAKY,MAAOA,KAAKC,iC,mDAWnBD,KAAKG,sBAAwB,EAEzBH,KAAKG,uBAAyBH,KAAKE,0BACrCF,KAAKF,uBACLE,KAAKsC,KAAK,mI,2BAITC,GAAwB,IAAfC,EAAe,4DAAVC,EACbzC,KAAKH,aAAa6C,OAASrC,OAAOU,UACxB0B,MAARD,EACFzB,QAAQ4B,IAAR,UAAeJ,GAAWC,GAG1BzB,QAAQ4B,IAAR,UAAeJ,U,+aCjHFK,E,WACnB,WAAY/C,EAAcgD,EAAkBC,EAAgCC,I,4FAA8B,SACxG/C,KAAKH,aAAeA,EAEpBG,KAAK6C,iBAAmBA,EAExB7C,KAAK8C,+BAAiCA,EAEtC9C,KAAK+C,8BAAgCA,EACrC/C,KAAKgD,QAAU,GACfhD,KAAKiD,aAAe,CAAC,KAAM,MAE3BjD,KAAKkD,c,yDAOL,IAAK,IAAIC,KAFTnD,KAAKsC,KAAK,oBAAqBtC,KAAK6C,iBAAiBO,OAEvBpD,KAAKgD,QACjChD,KAAKgD,QAAQG,GAAmBE,UAChCrD,KAAKgD,QAAQG,GAAmBG,UAGlCtD,KAAKgD,QAAU,KAEZhD,KAAK6C,iBAAiBU,gBACvBvD,KAAK6C,iBAAiBU,eAAeC,oBAAoBxD,KAAK+C,8BAA+B/C,KAAKyD,+B,oCAMpG,IAAIC,EAAW,IAAIrD,OAAOsD,cAAcC,OAAO5D,KAAK6C,iBAAiBgB,cAAe7D,KAAKH,aAAaiE,MAAO,KAAM9D,KAAKH,aAAakE,iBACrIL,EAASM,GAAG,gBAAiBhE,KAAKiE,mBAAmB7E,KAAKY,OAC1DA,KAAKgD,QAAL,GAAqBU,EAErB,IAAIQ,EAAW,IAAI7D,OAAOsD,cAAcC,OAAO5D,KAAK6C,iBAAiBgB,cAAe7D,KAAKH,aAAasE,MAAO,KAAMnE,KAAKH,aAAauE,iBACrIF,EAASF,GAAG,gBAAiBhE,KAAKqE,mBAAmBjF,KAAKY,OAC1DA,KAAKgD,QAAL,GAAqBkB,EAErB,IAAII,EAAY,IAAIjE,OAAOsD,cAAcC,OAAO5D,KAAK6C,iBAAiBgB,cAAe7D,KAAKH,aAAasE,MAAO,KAAM,IACpHG,EAAUN,GAAG,gBAAiBhE,KAAKuE,oBAAoBnF,KAAKY,OAC5DA,KAAKgD,QAAL,IAAsBsB,EAEtBtE,KAAKyD,4BAA8BzD,KAAKwE,gBAAgBpF,KAAKY,MAE1DA,KAAK6C,iBAAiBU,gBAMvBvD,KAAK6C,iBAAiBU,eAAe1C,iBAAiBb,KAAK+C,8BAA+B/C,KAAKyD,6BAC/FzD,KAAKyD,+BAGLzD,KAAKyE,kBAAkBzE,KAAKH,aAAa6E,kB,wCAM3C,IAAIC,EACJ,OAAQ3E,KAAK6C,iBAAiBU,eAAe1E,OAC3C,KAAKmB,KAAK6C,iBAAiB+B,GAAGC,aAC5BF,EAAgB,KAChB,MACF,KAAK3E,KAAK6C,iBAAiBiC,GAAGD,aAC5BF,EAAgB,KAChB,MACF,IAAK,GACL,KAAK,KACHA,EAAgB,OAChB,MACF,QACEA,EAAgB3E,KAAK6C,iBAAL,IAA0BgC,aAAa7E,KAAK6C,iBAAiBU,eAAe1E,QAAU,OAG1GmB,KAAKyE,kBAAkBE,K,wCAGPI,GAChB/E,KAAKsC,KAAK,yBAA0ByC,GAEpCzG,OAAO0G,OAAOhF,KAAKgD,SAASiC,SAAQ,SAAAC,GAAM,OAAIA,EAAO7B,aAElC,QAAf0B,IAEA,CAAC,KAAM,MAAM/C,SAAS+C,GACxB/E,KAAKgD,QAAQ+B,GAAaI,UAE1BnF,KAAKgD,QAAL,IAAoBmC,SACpBnF,KAAKgD,QAAL,IAAoBoC,WAAWL,O,8CAIXM,GAOtB,IACMC,EAAWD,EAASE,QADD,SAAAC,GAAO,OAAe,MAAXA,GAA8B,IAAXA,KAEvD,OAAOF,EAASG,OAAS,EAAIH,EAASI,KAAK,MAAQJ,EAAS,K,yCAI3CK,EAAaC,GAC9B,IAAIP,EAAWrF,KAAK6C,iBAAiB+B,GAAGS,SACpCQ,EAAW,IAAIlC,cAAcmC,kBAAkBH,EAAaC,GAEhE,GAAKP,EAASU,gBAAmBV,EAASW,QAI9BX,EAASU,gBAAkBV,EAASW,QAE9ChG,KAAKiG,iBAAiBZ,EAASa,eAAgBL,EAASM,uBAAwB,kBAChFnG,KAAKiG,iBAAiBZ,EAASW,OAAQH,EAASG,SAAU,YAChDX,EAASW,QAAUX,EAASU,gBACtC/F,KAAKiG,iBAAiBZ,EAASa,eAAgBL,EAASM,uBAAwB,kBAChFnG,KAAKiG,iBAAiBZ,EAASU,eAAgBF,EAASG,SAAU,oBAGlEhG,KAAKiG,iBAAiBZ,EAASa,eAAgBL,EAASK,iBAAkB,kBAC1ElG,KAAKiG,iBAAiBZ,EAASU,eAAgBF,EAASE,iBAAkB,kBAC1E/F,KAAKiG,iBAAiBZ,EAASW,OAAQH,EAASG,SAAU,eAfV,CAEhD,IAAMV,EAAWtF,KAAKoG,wBAAwB,CAACP,EAASM,uBAAwBN,EAASG,WACzFhG,KAAKiG,iBAAiBZ,EAASa,eAAgBZ,EAAU,kBAkB3D,GAHAtF,KAAKiG,iBAAiBZ,EAASgB,KAAMR,EAASQ,OAAQ,QACtDrG,KAAKiG,iBAAiBZ,EAASiB,SAAUT,EAASS,WAAY,YAE1DtG,KAAK6C,iBAAiB+B,GAAG2B,eAAgB,CAE3C,IAAMC,EAAwBxG,KAAK6C,iBAAiB+B,GAAG2B,eAAeX,EAASa,QAC/EzG,KAAKiG,iBAAiBZ,EAASoB,OAAQD,EAAuB,eAG9DxG,KAAKiG,iBAAiBZ,EAASoB,OAAQb,EAASa,OAAQ,Y,yCAKzCd,EAAaC,GAC9B,IAAIP,EAAWrF,KAAK6C,iBAAiBiC,GAAGO,SAExC,GAAKA,EAASU,eAIP,CACL/F,KAAKiG,iBAAiBZ,EAASa,eAAgBN,EAASM,eAAgB,kBAExE,IAAMH,EAAiBH,EAASG,gBAAkB,GAClD/F,KAAKiG,iBAAiBZ,EAASU,eAAgBA,EAAgB,sBARnC,CAE5B,IAAMT,EAAWtF,KAAKoG,wBAAwB,CAACR,EAASM,eAAgBN,EAASG,iBACjF/F,KAAKiG,iBAAiBZ,EAASa,eAAgBZ,EAAU,kBAW3D,GAHAtF,KAAKiG,iBAAiBZ,EAASqB,cAAed,EAASc,cAAe,UACtE1G,KAAKiG,iBAAiBZ,EAASiB,SAAUV,EAASU,SAAU,YAExDtG,KAAK6C,iBAAiBiC,GAAG6B,cAAe,CAE1C,IAAMC,EAAuB5G,KAAK6C,iBAAiBiC,GAAG6B,cAAcf,EAASiB,iBAC7E7G,KAAKiG,iBAAiBZ,EAASwB,gBAAiBD,EAAsB,wBAGtE5G,KAAKiG,iBAAiBZ,EAASwB,gBAAiBjB,EAASiB,gBAAiB,qB,0CAI1DlB,EAAaC,GAC/B,IAAIP,EAAWrF,KAAK6C,iBAAiBiC,GAAGO,SAExC,GAAKA,EAASU,eAIP,CACL/F,KAAKiG,iBAAiBZ,EAASa,eAAgBN,EAASkB,QAAQZ,eAAgB,kBAEhF,IAAMH,EAAiBH,EAASkB,QAAQf,gBAAkB,GAC1D/F,KAAKiG,iBAAiBZ,EAASU,eAAgBA,EAAgB,sBARnC,CAE5B,IAAMT,EAAWtF,KAAKoG,wBAAwB,CAACR,EAASkB,QAAQZ,eAAgBN,EAASkB,QAAQf,iBACjG/F,KAAKiG,iBAAiBZ,EAASa,eAAgBZ,EAAU,kBAQ3DtF,KAAKiG,iBAAiBZ,EAASqB,cAAed,EAASkB,QAAQT,KAAM,UACrErG,KAAKiG,iBAAiBZ,EAASiB,SAAUV,EAASkB,QAAQR,SAAU,YACpEtG,KAAKiG,iBAAiBZ,EAASwB,gBAAiBjB,EAASkB,QAAQC,MAAO,qB,uCAGzDvB,EAAS3G,EAAOmI,GAC/B,GAAKxB,EAAL,CAqBA,IAAIyB,EAAgBzB,EAAQ3G,MAC5B2G,EAAQ3G,MAAQA,EAChB,IAAIqI,EAAU1B,EAAQ2B,cAClBD,GACFA,EAAQE,SAASH,GAGnBjH,KAAKqH,eAAe7B,OA5BpB,CACE,IAAI8B,EAAe,mGAEkBN,EAChB,YAAcnI,EAE/BwB,OAAOU,SACTA,QAAQwG,KAAKD,M,qCA8BJ9B,GACb,IAAI1D,EACJ,2BAAgB0F,MAAhB,cAAgBA,QAChB,IAAK,WACH1F,EAAQ,IAAI0F,MAAMxH,KAAK8C,+BAAgC,CAAC,SAAU,EAAM,YAAc,IACtF,MACF,SACEhB,EAAQrB,SAASgH,YAAY,UACvBC,UAAU1H,KAAK8C,gCAAgC,GAAM,GAE7D0C,EAAQmC,cAAc7F,K,2BAGnBS,GAAwB,IAAfC,EAAe,4DAAVC,EACbzC,KAAKH,aAAa6C,OAASrC,OAAOU,UACxB0B,MAARD,EACFzB,QAAQ4B,IAAR,gCAAqC3C,KAAK6C,iBAAiBO,MAA3D,aAAqEb,GAAWC,GAGhFzB,QAAQ4B,IAAR,gCAAqC3C,KAAK6C,iBAAiBO,MAA3D,aAAqEb,U,swDCvPxDqF,E,WACnB,cAAsH,IAAzGC,EAAyG,EAAzGA,0BAA2BhI,EAA8E,EAA9EA,aAAciD,EAAgE,EAAhEA,+BAAgCC,EAAgC,EAAhCA,+B,4FAAgC,SAEpH/C,KAAK8H,QAAU,QAGf9H,KAAK+H,YAAc,GAEnB/H,KAAKgI,0BAA2B,EAEhChI,KAAK6H,0BAA4BA,EAEjC7H,KAAKH,aAAeA,EAEpBG,KAAK8C,+BAAiCA,EAEtC9C,KAAK+C,8BAAgCA,EAErC/C,KAAKiI,2BAA6B,GAElCjI,KAAKkI,OAASlI,KAAKkI,OAAO9I,KAAKY,MAE/BA,KAAKmI,kB,sDAIAN,GACA7H,KAAKoI,iCAAkCpI,KAAKqI,oBAAoBR,KACnE7H,KAAKiI,2BAA6B,GAClCjI,KAAK6H,0BAA4BA,EACjC7H,KAAKmI,qB,wCAMPnI,KAAK+H,YAAY9C,SAAQ,SAAAqD,GAAU,OAAIA,EAAWhF,aAClDtD,KAAKuI,oCAAsC,GAC3CvI,KAAK+H,YAAc,GAEnB/H,KAAKwI,wBACLxI,KAAKuI,oCAAoCtD,QAAQjF,KAAKyI,sBAAsBrJ,KAAKY,S,8CAG3D0I,GAEtB,IAAIA,EAAOnF,eAAgB,OAAOvD,KAAKH,aAAa6E,eAEpD,IAAIiE,EAAqB,KAkBzB,MAjBmB,CAAC,KAAM,KAAM,OACnB1D,SAAQ,SAACF,GACpB,IAAI6D,EAAsBF,EAAOnF,eAAe1E,OAC3C+J,GAAuBF,EAAOG,kBACjCD,EAAsBF,EAAOG,mBAGZ,OAAf9D,EACE2D,EAAO3D,GAAaF,aAAa+D,KACnCD,EAAqBD,EAAO3D,GAAaF,aAAa+D,IAGpDA,IAAwBF,EAAO3D,GAAaF,eAC9C8D,EAAqB5D,MAIpB4D,I,qDASqB,WAC5B,OAA+C,IAA3C3I,KAAKiI,2BAA2BxC,QAK7BzF,KAAKiI,2BAA2Ba,OAAM,SAACJ,GAE5C,IAAK,EAAKK,sCAAsCL,GAK9C,OAAO,EAGT,GAA6B,MAAzBA,EAAOnF,iBAA2B9C,SAASC,KAAKa,SAASmH,EAAOnF,iBAAmB,EAAKyE,yBAK1F,OAAO,EAGT,IAAIW,EAAqB,EAAKK,wBAAwBN,GAItD,OAA0B,MAAtBC,KAEC,EAAKM,2CAA2CP,EAAQC,Q,kDASrCD,EAAQ3D,GAClC,IAAMmE,EAAmB,GAoBzB,MAlBI,CAAC,KAAM,MAAMlH,SAAS+C,GACxBzG,OAAO6K,QAAQT,EAAO3D,GAAaM,UAAUJ,SAAQ,YAAoB,aAAlB9F,EAAkB,KAAbqG,EAAa,KAGjEkD,EAAO3D,GAAaqE,iBAAiBpH,SAAS7C,IAAoB,OAAZqG,IAC1D0D,EAAiB/J,GAAOqG,MAI5BlH,OAAO6K,QAAQT,EAAM,IAAQrD,UAAUJ,SAAQ,YAAoB,aAAlB9F,EAAkB,KAAbqG,EAAa,KAG3DkD,EAAM,IAAQU,iBAAiBrE,GAAa/C,SAAS7C,IAAoB,OAAZqG,IACjE0D,EAAiB/J,GAAOqG,MAKvB0D,I,iEAGkCR,EAAQ3D,GACjD,IAAKA,EAAe,OAAO,EAE3B,IAAMsE,EAAmBrJ,KAAKsJ,4BAA4BZ,EAAQ3D,GAElE,OAAOzG,OAAO0G,OAAOqE,GAAkBP,OAAM,SAACtD,GAC5C,OAAmB,OAAZA,GAAoB/E,SAASC,KAAKa,SAASiE,Q,4DAIhB+D,GAEpC,OAAOA,EAAkBC,gBAAgBV,OAAM,SAACW,GAC9C,IAAIjE,EAAU/E,SAASiJ,cAAcD,GAKrC,OAAmB,OAAZjE,GAA8C,SAA1BA,EAAQmE,MAAMC,a,8CAKtB,UACW5J,KAAK6H,2BADhB,IACrB,2BAAgE,KAArD0B,EAAqD,QAE1DvJ,KAAK+I,sCAAsCQ,KAC7CvJ,KAAK2C,IAAL,mCAAqC4G,EAAkBnG,QAEvDpD,KAAKuI,oCAAoCsB,KAAKN,KAN7B,iC,0CAYH1B,GAClB,IAD4C,EACxCiC,EAAkB,GADsB,IAGZjC,GAHY,IAG5C,2BAA2D,KAAhD0B,EAAgD,QACrDvJ,KAAK+I,sCAAsCQ,IAC7CO,EAAgBD,KAAKN,IALmB,8BAW5C,OAAIO,EAAgBrE,OAASzF,KAAKuI,oCAAoC9C,SACpEzF,KAAK2C,IAAI,+BACF,K,4CAOW4G,GACpB,IAAI1F,EAAgBpD,SAASiJ,cAAcH,EAAkBQ,kBAE7D,GAAIlG,GAAiBA,aAAyBmG,iBAAkB,CAC9D,IAAInH,EAAmB,CACrBU,eAAgB9C,SAASiJ,cAAcH,EAAkBU,mBACzDpG,cAAepD,SAASiJ,cAAcH,EAAkBQ,kBACxD3G,MAAOmG,EAAkBnG,MACzBoG,gBAAiBD,EAAkBC,gBACnCX,gBAAiBU,EAAkBV,gBACnCjE,GAAI,CACFC,aAAc0E,EAAkB3E,GAAGC,aACnCQ,SAAU,CACRa,eAAgBzF,SAASiJ,cAAcH,EAAkB3E,GAAGS,SAAS6E,UACrEnE,eAAgBtF,SAASiJ,cAAcH,EAAkB3E,GAAGS,SAAS8E,UACrEnE,OAAQvF,SAASiJ,cAAcH,EAAkB3E,GAAGS,SAASW,QAC7DK,KAAM5F,SAASiJ,cAAcH,EAAkB3E,GAAGS,SAASgB,MAC3DI,OAAQhG,SAASiJ,cAAcH,EAAkB3E,GAAGS,SAASoB,QAC7DH,SAAU7F,SAASiJ,cAAcH,EAAkB3E,GAAGS,SAASiB,WAEjEC,eAAgBgD,EAAkB3E,GAAG2B,eACrC6C,iBAAkB,CAAC,iBAAkB,WAEvCtE,GAAI,CACFD,aAAc0E,EAAkBzE,GAAGD,aACnCQ,SAAU,CACRa,eAAgBzF,SAASiJ,cAAcH,EAAkBzE,GAAGO,SAAS6E,UACrEnE,eAAgBtF,SAASiJ,cAAcH,EAAkBzE,GAAGO,SAAS8E,UACrEzD,cAAejG,SAASiJ,cAAcH,EAAkBzE,GAAGO,SAASW,QACpEa,gBAAiBpG,SAASiJ,cAAcH,EAAkBzE,GAAGO,SAAS0B,OACtET,SAAU7F,SAASiJ,cAAcH,EAAkBzE,GAAGO,SAASiB,WAEjEK,cAAe4C,EAAkBzE,GAAG6B,cACpCyC,iBAAkB,CAAC,mBAErBgB,IAAK,CACHvF,aAAc0E,EAAiB,IAAK1E,aACpCQ,SAAU,CACRa,eAAgBzF,SAASiJ,cAAcH,EAAiB,IAAKlE,SAAS6E,UACtEnE,eAAgBtF,SAASiJ,cAAcH,EAAiB,IAAKlE,SAAS8E,UACtEzD,cAAejG,SAASiJ,cAAcH,EAAiB,IAAKlE,SAASW,QACrEa,gBAAiBpG,SAASiJ,cAAcH,EAAiB,IAAKlE,SAAS0B,OACvET,SAAU7F,SAASiJ,cAAcH,EAAiB,IAAKlE,SAASiB,WAElEK,cAAe4C,EAAiB,IAAK5C,cACrCyC,iBAAkBG,EAAiB,IAAKH,mBAI5CpJ,KAAKiI,2BAA2B4B,KAAKhH,GAGE,MAAnCA,EAAiBU,gBAA0B9C,SAASC,KAAKa,SAASsB,EAAiBU,kBACrFvD,KAAKgI,0BAA2B,GAGlC,IAAIqC,EAAS,IAAIzH,EAAY5C,KAAKH,aAAcgD,EAAkB7C,KAAK8C,+BAAgC9C,KAAK+C,+BAC5G/C,KAAK+H,YAAY8B,KAAKQ,M,0BAItB9H,GAAwB,IAAfC,EAAe,4DAAVC,EACZzC,KAAKH,aAAa6C,OAASrC,OAAOU,UACxB0B,MAARD,EACFzB,QAAQ4B,IAAR,UAAeJ,GAAWC,GAG1BzB,QAAQ4B,IAAR,UAAeJ,U,gCCtQR,WAAC+H,GAAgB,MACxB9E,EAAU/E,SAASiJ,cAAcY,GA0CvC,OAAI9E,GAA8H,IAAnH,UAAA+E,MAAMC,KAAKhF,EAAQiF,iBAAiB,WAAWC,KAAI,SAACC,GAAD,OAAQA,EAAG9L,SAAO0G,QAAO,SAACqF,GAAD,OAASA,EAAInF,OAAS,KAAG,UAArG,eAAyGA,QApB7F,CACzB,kBAAmB,KACnB,uBAAwB,KACxB,oBAAqB,KACrB,kBAAmB,KACnB,qBAAuB,KACvB,2BAA4B,KAC5B,qBAAsB,KACtB,gBAAiB,KACjB,mBAAoB,KACpB,eAAgB,KAChB,mBAAoB,KACpB,kBAAmB,KACnB,gBAAiB,KACjB,iBAAkB,KAClB,oBAAqB,KACrB,oBAAqB,KACrB,8BAA+B,MArCJ,CAC3B,kBAAmB,MACnB,uBAAwB,MACxB,oBAAqB,MACrB,kBAAmB,MACnB,qBAAuB,MACvB,2BAA4B,MAC5B,qBAAsB,MACtB,gBAAiB,MACjB,mBAAoB,MACpB,eAAgB,MAChB,mBAAoB,MACpB,kBAAmB,MACnB,gBAAiB,MACjB,iBAAkB,MAClB,oBAAqB,MACrB,oBAAqB,MACrB,8BAA+B,OClBpB,GACbrC,MAAO,mBACPoG,gBAAiB,CAAC,sBAClBS,kBAAmB,mBACnBF,iBAAkB,qBAClBnF,GAAI,CACFC,aAAc,KACdQ,SAAU,CACR6E,SAAU,qBACVC,SAAU,KACVnE,OAAQ,qBACRK,KAAM,gBACNI,OAAQ,iBACRH,SAAU,qBAEZC,eAAgBA,EAAe,mBAEjCzB,GAAI,CACFD,aAAc,KACdQ,SAAU,CACR6E,SAAU,qBACVC,SAAU,qBACVnE,OAAQ,gBACRe,MAAO,iBACPT,SAAU,qBAEZK,cAAe,MAEjByD,IAAK,CACHvF,aAAc,CAAC,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,MACjLQ,SAAU,CACR6E,SAAU,qBACVC,SAAU,qBACVnE,OAAQ,gBACRe,MAAO,iBACPT,SAAU,qBAEZK,cAAe,KACfyC,iBAAkB,CAAC,GAAM,CAAC,iBAAkB,mBAAoB,GAAM,CAAC,kBAAmB,GAAM,CAAC,kBAAmB,GAAM,CAAC,iBAAkB,mBAAoB,GAAM,CAAC,kBAAmB,GAAM,CAAC,kBAAmB,GAAM,CAAC,kBAAmB,GAAM,CAAC,iBAAkB,mBAAoB,GAAM,CAAC,iBAAkB,mBAAoB,GAAM,CAAC,iBAAkB,mBAAoB,GAAM,CAAC,kBAAmB,GAAM,CAAC,kBAAmB,GAAM,CAAC,kBAAmB,GAAM,CAAC,qBCtChc,GACbhG,MAAO,oBACPoG,gBAAiB,CAAC,uBAClBS,kBAAmB,oBACnBF,iBAAkB,sBAClBnF,GAAI,CACFC,aAAc,KACdQ,SAAU,CACR6E,SAAU,sBACVC,SAAU,KACVnE,OAAQ,sBACRK,KAAM,iBACNI,OAAQ,kBACRH,SAAU,sBAEZC,eAAgBA,EAAe,oBAEjCzB,GAAI,CACFD,aAAc,KACdQ,SAAU,CACR6E,SAAU,sBACVC,SAAU,sBACVnE,OAAQ,iBACRe,MAAO,kBACPT,SAAU,sBAEZK,cAAe,MAEjByD,IAAK,CACHvF,aAAc,CAAC,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,KAAM,GAAM,MACjLQ,SAAU,CACR6E,SAAU,sBACVC,SAAU,sBACVnE,OAAQ,iBACRe,MAAO,kBACPT,SAAU,sBAEZK,cAAe,KACfyC,iBAAkB,CAAC,GAAM,CAAC,iBAAkB,mBAAoB,GAAM,CAAC,kBAAmB,GAAM,CAAC,kBAAmB,GAAM,CAAC,iBAAkB,mBAAoB,GAAM,CAAC,kBAAmB,GAAM,CAAC,kBAAmB,GAAM,CAAC,kBAAmB,GAAM,CAAC,iBAAkB,mBAAoB,GAAM,CAAC,iBAAkB,mBAAoB,GAAM,CAAC,iBAAkB,mBAAoB,GAAM,CAAC,kBAAmB,GAAM,CAAC,iBAAkB,mBAAoB,GAAM,CAAC,kBAAmB,GAAM,CAAC,qBCtCnd,GACbhG,MAAO,0BACPoG,gBAAiB,CAAC,uBAClBS,kBAAmB,iCACnBF,iBAAkB,sBAClBnF,GAAI,CACFC,aAAc,cACdQ,SAAU,CACR6E,SAAU,sBACVC,SAAU,KACVnE,OAAQ,sBACRK,KAAM,iBACNI,OAAQ,iCACRH,SAAU,sBAEZC,eAAgBA,EAAe,mCAEjCzB,GAAI,CACFD,aAAc,YACdQ,SAAU,CACR6E,SAAU,sBACVC,SAAU,sBACVnE,OAAQ,iBACRe,MAAO,iCACPT,SAAU,sBAEZK,cAAe,MAEjByD,IAAK,CACHvF,aAAc,CAAC,QAAW,KAAM,OAAU,KAAM,QAAW,KAAM,QAAW,KAAM,OAAU,KAAM,QAAW,KAAM,QAAW,KAAM,YAAe,KAAM,SAAY,KAAM,UAAa,KAAM,MAAS,KAAM,OAAU,KAAM,sBAAuB,KAAM,qBAAsB,MAChRQ,SAAU,CACR6E,SAAU,sBACVC,SAAU,sBACVnE,OAAQ,iBACRe,MAAO,iCACPT,SAAU,sBAEZK,cAAe,KAEfyC,iBAAkB,CAAC,GAAM,CAAC,iBAAkB,mBAAoB,GAAM,CAAC,kBAAmB,GAAM,CAAC,kBAAmB,GAAM,CAAC,iBAAkB,mBAAoB,GAAM,CAAC,kBAAmB,GAAM,CAAC,kBAAmB,GAAM,CAAC,kBAAmB,GAAM,CAAC,iBAAkB,mBAAoB,GAAM,CAAC,iBAAkB,mBAAoB,GAAM,CAAC,iBAAkB,mBAAoB,GAAM,CAAC,kBAAmB,GAAM,CAAC,iBAAkB,mBAAoB,GAAM,CAAC,kBAAmB,GAAM,CAAC,qBCvCnd,GACbhG,MAAO,yBACPoG,gBAAiB,CAAC,sBAClBS,kBAAmB,iCACnBF,iBAAkB,qBAClBnF,GAAI,CACFC,aAAc,cACdQ,SAAU,CACR6E,SAAU,qBACVC,SAAU,KACVnE,OAAQ,qBACRK,KAAM,gBACNI,OAAQ,iCACRH,SAAU,qBAEZC,eAAgBA,EAAe,mCAEjCzB,GAAI,CACFD,aAAc,YACdQ,SAAU,CACR6E,SAAU,qBACVC,SAAU,qBACVnE,OAAQ,gBACRe,MAAO,iCACPT,SAAU,qBAEZK,cAAe,MAEjByD,IAAK,CACHvF,aAAc,CAAC,QAAW,KAAM,OAAU,KAAM,QAAW,KAAM,QAAW,KAAM,OAAU,KAAM,QAAW,KAAM,QAAW,KAAM,YAAe,KAAM,SAAY,KAAM,UAAa,KAAM,MAAS,KAAM,OAAU,KAAM,sBAAuB,KAAM,qBAAsB,MAChRQ,SAAU,CACR6E,SAAU,qBACVC,SAAU,qBACVnE,OAAQ,gBACRe,MAAO,iCACPT,SAAU,qBAEZK,cAAe,KAEfyC,iBAAkB,CAAC,GAAM,CAAC,iBAAkB,mBAAoB,GAAM,CAAC,kBAAmB,GAAM,CAAC,kBAAmB,GAAM,CAAC,iBAAkB,mBAAoB,GAAM,CAAC,kBAAmB,GAAM,CAAC,kBAAmB,GAAM,CAAC,kBAAmB,GAAM,CAAC,iBAAkB,mBAAoB,GAAM,CAAC,iBAAkB,mBAAoB,GAAM,CAAC,iBAAkB,mBAAoB,GAAM,CAAC,kBAAmB,GAAM,CAAC,iBAAkB,mBAAoB,GAAM,CAAC,kBAAmB,GAAM,CAAC,qB,0KCzC7cyB,E,0LAENhD,GACX,IAAIiD,EAAkB9K,KAAK+K,cAAc,oBACrCC,EAAgBhL,KAAK+K,cAAc,mBAAqB,kBACxDE,EAAiBjL,KAAK+K,cAAc,mBACpCG,EAAelL,KAAK+K,cAAc,kBAAoB,iBAG1DlD,EAA0B5C,SAAQ,SAACkG,GACN,2BAAvBA,EAAc/H,OAChB+H,EAAclB,kBAAoBa,EAClCK,EAAcvG,GAAGS,SAASoB,OAASuE,EACnCG,EAAcrG,GAAGO,SAAS0B,MAAQiE,EAClCG,EAAa,IAAK9F,SAAS0B,MAAQiE,GACH,0BAAvBG,EAAc/H,QACvB+H,EAAclB,kBAAoBgB,EAClCE,EAAcvG,GAAGS,SAASoB,OAASyE,EACnCC,EAAcrG,GAAGO,SAAS0B,MAAQmE,EAClCC,EAAa,IAAK9F,SAAS0B,MAAQmE,Q,oCAK3BE,GACZ,IAAIC,EAAS5K,SAAS6K,eAAeF,GAErC,GAAIC,EAAO,CACT,IAAIE,EAASF,EAAOG,qBAAqB,SAEzC,GAAqB,GAAjBD,EAAO9F,OACT,iBAAW8F,EAAO,GAAGE,IAIzB,OAAO,U,0MC/BAvN,EAAGwN,EACNC,EA8HFhM,EC7HeiM,E,WAEnB,c,4FAAa,SACX5L,KAAK6K,qBAAuB,IAAIA,E,sDAKhC,IAAMhD,EAA4B,CAChCgE,EACAC,EACAC,EACAC,GAQF,OAFAhM,KAAK6K,qBAAqBoB,aAAapE,GAEhCA,O,sMDtBA3J,EAqIRuC,SArIWiL,EAqIDrL,OApILsL,EADS,WAEb,c,4FAAc,SAEZ3L,KAAK8H,QAAU,QAGf9H,KAAK4H,YAAc,KAGnB5H,KAAK4L,cAAgB,KAErB5L,KAAKkM,YAAclM,KAAKkM,YAAY9M,KAAKY,MAEzCA,KAAKmM,uBAAyBnM,KAAKmM,uBAAuB/M,KAAKY,MAC/D0L,EAAES,uBAAyBnM,KAAKmM,uBAEhCnM,KAAKoM,mB,UAjBM,O,EAAA,G,EAAA,8CAsBX,IAAIvE,EAA4B7H,KAAK4L,cAAcS,OAC/CrM,KAAK4H,aACP5H,KAAK4H,YAAYM,OAAOL,KAxBf,2CA4BQyE,GACnB,GAAkB7J,MAAd6J,EACF,OAAO,KAGT,IACEA,EAAaC,KAAKC,MAAMF,GACxB,MAAOG,GAKP,OAJIf,EAAEgB,oBAAoBhK,OACxBiK,MAAM,0BAA4BL,GAG7B,KAGT,OAAOA,IA3CI,uCA8CIxK,EAAO8K,GAAa,WAOnC,GAFAA,EAAcA,GAAe,GAET,YAAhB1O,EAAE2O,iBAAsD,IAAnBnB,EAAE/H,cAQ3C,OAAmB,GAAfiJ,GAEF7L,QAAQ4B,IAAI,wBACZ3C,KAAKkM,oBAIP7J,YAAW,WAET,EAAK+J,iBAAiB,eAAgBQ,EAAc,KACnD,KAjBDvK,YAAW,WACTtB,QAAQ4B,IAAI,eACZ,EAAKuJ,gBACJ,OAzDM,oCA2EX,IAAIY,EAAsB9M,KAAK+M,qBAAqBrB,EAAEgB,oBAAoBM,gBACtEC,EAAwBjN,KAAK+M,qBAAqBrB,EAAEgB,oBAAoBQ,mBACxEC,EAAwBnN,KAAK+M,qBAAqBrB,EAAEgB,oBAAoBU,mBAEtEvN,EAAe,CACnBiE,MAAO4H,EAAEgB,oBAAoBW,QAAU3B,EAAEgB,oBAAoBvN,KAAOuM,EAAEgB,oBAAoBY,OAC1FnJ,MAAOuH,EAAEgB,oBAAoBY,QAAU5B,EAAEgB,oBAAoBvN,KAAOuM,EAAEgB,oBAAoBW,OAC1FtJ,gBAAiBkJ,GAAyBH,GAAuB,GACjE1I,gBAAiB+I,GAAyBL,GAAuB,GACjEpI,eAAgBgH,EAAEgB,oBAAoBa,iBAAmB,KACzD7K,MAAOgJ,EAAEgB,oBAAoBhK,QAAS,GAGxC1C,KAAK4L,cAAgB,IAAIA,EAGzB,IAAIhM,EAAgB,CAClBC,aAAcA,EACdC,qBAAsBE,KAAKF,qBAAqBV,KAAKY,MACrDD,aAAc,YAGhBC,KAAK4H,YAAc,IAAIA,EAAY,CACjCC,0BAA2B7H,KAAK4L,cAAcS,OAC9CxM,eAEAiD,+BAAgC,SAEhCC,8BAA+B,SAGjC/C,KAAKwN,qBAEL9B,EAAE/H,cAAc8J,mBAAqBzN,KAAK4H,cA5G/B,2CAiHX5H,KAAK4H,YAAL,oBAA0C5H,KAAK4H,YAAYE,QAC3D9H,KAAK4H,YAAYE,QAAU9H,KAAK8H,UAlHrB,+CA0HX4D,EAAEgB,oBAAoBhK,OAAQ,EAC9B1C,KAAKkM,mB,2BA3HM,MA+HXvM,EAAIzB,EAAEwP,cAAc,WACtBC,IAAM,mDACRhO,EAAEiO,MAAQ,EACVjO,EAAEkO,OAAS,WAAc,IAAIlC,GAC7BzN,EAAEwC,KAAKoN,YAAYnO","file":"addressfinder.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export default class MutationManager {\n  constructor({widgetConfig, mutationEventHandler, ignoredClass}) {\n    this.widgetConfig = widgetConfig\n    this.mutationEventHandler = mutationEventHandler\n\n    // Mutation events emitted by elements with this class are ignored.\n    this.ignoredClass = ignoredClass\n\n    this.millisecondsToIgnoreMutations = 750\n\n    // The amount of times the page can mutate in a row without forcing AddressFinder to be reinitialised.\n    this.maxMutationTimeoutCount = 20\n    // The count of the times the page has mutated in a row\n    this.mutationTimeoutCount = 0\n\n    this.monitorMutations()\n  }\n\n  // Attaches an observer or eventListener for listening to mutations\n  monitorMutations(){\n    if (window.MutationObserver) {\n      // for modern browsers\n      var observer = new MutationObserver(this._mutationHandler.bind(this));\n      observer.observe(document.body, {childList: true, subtree: true});\n\n    } else if (window.addEventListener) {\n      // for IE 9 and 10\n      document.body.addEventListener('DOMNodeInserted', this._domNodeModifiedHandler.bind(this), false);\n      document.body.addEventListener('DOMNodeRemoved', this._domNodeModifiedHandler.bind(this), false);\n    } else {\n        if (window.console) {\n          console.info('AddressFinder Error - please use a more modern browser')\n        }\n    }\n  }\n\n  /**\n   * For modern browsers:\n   * Determines if a mutation was triggered by AddressFinder or the Ecommerce store.\n   */\n  _mutationHandler(mutations){\n    const changedNodes = mutations.reduce((nodes, mutation) => {\n      // ignore this mutation if the target is the AddressFinder UL element\n      if (mutation.target && mutation.target.classList && mutation.target.classList.contains(this.ignoredClass)) {\n        return nodes\n      }\n\n      return nodes.concat([...mutation.addedNodes]).concat([...mutation.removedNodes])\n    }, [])\n\n    const anyStoreMutations = changedNodes.find((node) => {\n      return !(node.classList && node.classList.contains(this.ignoredClass))\n    })\n\n    if (!anyStoreMutations) {\n      return // ignore AddressFinder changes\n    }\n\n    this._setMutationTimeout()\n  }\n\n  /**\n   * For IE9 and IE10:\n   * Determines if a mutation was triggered by AddressFinder or the Ecommerce store.\n   */\n  _domNodeModifiedHandler(event){\n    if ((event.target.className && event.target.className.includes(this.ignoredClass)) ||\n        (event.relatedNode && event.relatedNode.className && event.relatedNode.className.includes(this.ignoredClass))) {\n        return // ignore AddressFinder changes\n    }\n\n    this._setMutationTimeout()\n  }\n\n  _setMutationTimeout() {\n    if (this._mutationTimeout) {\n\n\n      this._monitorExcessiveMutations()\n\n      clearTimeout(this._mutationTimeout) // reset previous timeout\n    }\n\n    // ignore any further changes for the next 750 mS\n    this._mutationTimeout = setTimeout(function() {\n      // If we can successfully call our mutation handler, reset the count.\n      this.mutationTimeoutCount = 0\n      this.mutationEventHandler()\n    }.bind(this), this.millisecondsToIgnoreMutations)\n  }\n\n\n  /**\n   * If the store continously triggers mutations the mutationEventHandler will never be called. If it is reset 20 times in a row,\n   * the page is considered to be mutating excessively. In this case we initialise AddressFinder, and in debug mode we warn the user\n   * that excessive mutations may stop AddressFinder from working.\n   *\n   */\n  _monitorExcessiveMutations() {\n    this.mutationTimeoutCount += 1\n\n    if (this.mutationTimeoutCount === this.maxMutationTimeoutCount) {\n      this.mutationEventHandler()\n      this._log('Page is triggering a large amount of mutations, which may prevent AddressFinder from working, and will slow down your store.')\n    }\n  }\n\n  _log(message, data=undefined){\n    if (this.widgetConfig.debug && window.console) {\n      if (data != undefined) {\n        console.log(`${message}`, data)\n      }\n      else {\n        console.log(`${message}`)\n      }\n    }\n  }\n}\n","export default class FormManager {\n  constructor(widgetConfig, formHelperConfig, formFieldChangeEventToDispatch, countryChangeEventToListenFor){\n    this.widgetConfig = widgetConfig\n    // Contains references to the DOM elements that make up this form\n    this.formHelperConfig = formHelperConfig\n    // When an address is selected dispatch this event on all the updated form fields. This tells the store the fields have been changed.\n    this.formFieldChangeEventToDispatch = formFieldChangeEventToDispatch\n    // An event listener with this event type is attached to country element. When the country changes the active country for the widget is set.\n    this.countryChangeEventToListenFor = countryChangeEventToListenFor\n    this.widgets = {}\n    this.countryCodes = [\"au\", \"nz\"]\n\n    this._bindToForm()\n  }\n\n  // Shuts down this form_helper by disabling the widget and any callback handlers.\n  destroy(){\n    this._log(\"Destroying widget\", this.formHelperConfig.label)\n\n    for (var widgetCountryCode in this.widgets) {\n      this.widgets[widgetCountryCode].disable()\n      this.widgets[widgetCountryCode].destroy()\n    }\n\n    this.widgets = null\n\n    if(this.formHelperConfig.countryElement) {\n      this.formHelperConfig.countryElement.removeEventListener(this.countryChangeEventToListenFor, this.boundCountryChangedListener)\n    }\n  }\n\n  // Creates the widgets and attaches a listener to the country element, so we can determine which widget should be active.\n  _bindToForm(){\n    let nzWidget = new window.AddressFinder.Widget(this.formHelperConfig.searchElement, this.widgetConfig.nzKey, \"nz\", this.widgetConfig.nzWidgetOptions);\n    nzWidget.on(\"result:select\", this._nzAddressSelected.bind(this))\n    this.widgets[\"nz\"] = nzWidget\n\n    let auWidget = new window.AddressFinder.Widget(this.formHelperConfig.searchElement, this.widgetConfig.auKey, \"au\", this.widgetConfig.auWidgetOptions);\n    auWidget.on(\"result:select\", this._auAddressSelected.bind(this))\n    this.widgets[\"au\"] = auWidget\n\n    let intWidget = new window.AddressFinder.Widget(this.formHelperConfig.searchElement, this.widgetConfig.auKey, \"us\", {});\n    intWidget.on(\"result:select\", this._intAddressSelected.bind(this))\n    this.widgets[\"int\"] = intWidget\n\n    this.boundCountryChangedListener = this._countryChanged.bind(this) // save this so we can unbind in the destroy() method\n\n    if(this.formHelperConfig.countryElement) {\n      /**\n       * The countryChangeEventToListenFor is the event we want to listen for to call the _countryChanged handler and reset the\n       * active country used by the widget to determine which database to search. Typically this event will be 'change' but in the\n       * case of WooCommerce it is blur.\n       */\n      this.formHelperConfig.countryElement.addEventListener(this.countryChangeEventToListenFor, this.boundCountryChangedListener)\n      this.boundCountryChangedListener()\n    } else {\n      // Sometimes there is no countryElement (WooCommerce). Not calling the changeHandler means that the widget can remain enabled.\n      this._setActiveCountry(this.widgetConfig.defaultCountry)\n    }\n  }\n\n  // Matches the value of the countryElement with the countryValue for this configuration. If it finds a match this will become the active country.\n  _countryChanged(){\n    var activeCountry;\n    switch (this.formHelperConfig.countryElement.value) {\n      case this.formHelperConfig.nz.countryValue:\n        activeCountry = \"nz\"\n        break;\n      case this.formHelperConfig.au.countryValue:\n        activeCountry = \"au\"\n        break;\n      case \"\":\n      case null:\n        activeCountry = \"null\"\n        break;\n      default:\n        activeCountry = this.formHelperConfig.int.countryValue[this.formHelperConfig.countryElement.value] || \"null\";\n    }\n\n    this._setActiveCountry(activeCountry)\n  }\n\n  _setActiveCountry(countryCode){\n    this._log(\"Setting active country\", countryCode)\n\n    Object.values(this.widgets).forEach(widget => widget.disable())\n\n    if (countryCode == \"null\") { return }\n\n    if ([\"nz\", \"au\"].includes(countryCode)) {\n      this.widgets[countryCode].enable()\n    } else {\n      this.widgets[\"int\"].enable()\n      this.widgets[\"int\"].setCountry(countryCode)\n    }\n  }\n\n  _combineAddressElements(elements) {\n    /**\n     * If we have two valid address elements, connect the string with a comma in between, otherwise just use the first.\n     * For example:\n     * ['65 Beauchamp Street', 'Karori'] becomes '65 Beauchamp Street, Karori'\n     * ['34 Arapuni Road', \"\"] becomes '34 Arapuni Road'\n     */\n    const addressIsPresent = element => element != null && element != \"\"\n    const combined = elements.filter(addressIsPresent)\n    return combined.length > 1 ? combined.join(\", \") : combined[0]\n  }\n\n  // Handles populating the elements with the response from the api (New Zealand)\n  _nzAddressSelected(fullAddress, metaData){\n    let elements = this.formHelperConfig.nz.elements\n    let selected = new AddressFinder.NZSelectedAddress(fullAddress, metaData);\n\n    if (!elements.address_line_2 && !elements.suburb) {\n      // If we only have address_line_1, the address line 1, 2 and suburb values are populated in that field.\n      const combined = this._combineAddressElements([selected.address_line_1_and_2(), selected.suburb()])\n      this._setElementValue(elements.address_line_1, combined, \"address_line_1\")\n    } else if (!elements.address_line_2 && elements.suburb) {\n      // If we have address_line_1 and a suburb field, put address 1 and 2 into address line 1, and suburb into the suburb field.\n      this._setElementValue(elements.address_line_1, selected.address_line_1_and_2(), \"address_line_1\")\n      this._setElementValue(elements.suburb, selected.suburb(), \"suburb\")\n    } else if (!elements.suburb && elements.address_line_2) {\n      this._setElementValue(elements.address_line_1, selected.address_line_1_and_2(), \"address_line_1\")\n      this._setElementValue(elements.address_line_2, selected.suburb(), \"address_line_2\")\n    } else {\n      // If we have all 3 fields populate each one.\n      this._setElementValue(elements.address_line_1, selected.address_line_1(), \"address_line_1\")\n      this._setElementValue(elements.address_line_2, selected.address_line_2(), \"address_line_2\")\n      this._setElementValue(elements.suburb, selected.suburb(), \"suburb\")\n    }\n\n    this._setElementValue(elements.city, selected.city(), \"city\")\n    this._setElementValue(elements.postcode, selected.postcode(), \"postcode\")\n\n    if (this.formHelperConfig.nz.regionMappings) {\n      // matches the region returned by the api with the region values in the select field\n      const translatedRegionValue = this.formHelperConfig.nz.regionMappings[metaData.region]\n      this._setElementValue(elements.region, translatedRegionValue, \"region\")\n    }\n    else {\n      this._setElementValue(elements.region, metaData.region, \"region\")\n    }\n  }\n\n  // Handles populating the elements with the response from the api (Australia)\n  _auAddressSelected(fullAddress, metaData){\n    let elements = this.formHelperConfig.au.elements\n\n    if (!elements.address_line_2) {\n      // If we only have address_line_1, put both address 1 and 2 into this line\n      const combined = this._combineAddressElements([metaData.address_line_1, metaData.address_line_2])\n      this._setElementValue(elements.address_line_1, combined, \"address_line_1\")\n    } else {\n      this._setElementValue(elements.address_line_1, metaData.address_line_1, \"address_line_1\")\n      // metaData.address_line_2 could be undefined, in which case we replace it with an empty string\n      const address_line_2 = metaData.address_line_2 || \"\"\n      this._setElementValue(elements.address_line_2, address_line_2, \"address_line_2\")\n    }\n\n    this._setElementValue(elements.locality_name, metaData.locality_name, \"suburb\")\n    this._setElementValue(elements.postcode, metaData.postcode, \"postcode\")\n\n    if (this.formHelperConfig.au.stateMappings) {\n      // matches the state returned by the api with the region values in the select field\n      const translatedStateValue = this.formHelperConfig.au.stateMappings[metaData.state_territory]\n      this._setElementValue(elements.state_territory, translatedStateValue, \"state_territory\")\n    }\n    else {\n      this._setElementValue(elements.state_territory, metaData.state_territory, \"state_territory\")\n    }\n  }\n\n  _intAddressSelected(fullAddress, metaData){\n    let elements = this.formHelperConfig.au.elements\n\n    if (!elements.address_line_2) {\n      // If we only have address_line_1, put both address 1 and 2 into this line\n      const combined = this._combineAddressElements([metaData.address.address_line_1, metaData.address.address_line_2])\n      this._setElementValue(elements.address_line_1, combined, \"address_line_1\")\n    } else {\n      this._setElementValue(elements.address_line_1, metaData.address.address_line_1, \"address_line_1\")\n      // metaData.address_line_2 could be undefined, in which case we replace it with an empty string\n      const address_line_2 = metaData.address.address_line_2 || \"\"\n      this._setElementValue(elements.address_line_2, address_line_2, \"address_line_2\")\n    }\n\n    this._setElementValue(elements.locality_name, metaData.address.city, \"suburb\")\n    this._setElementValue(elements.postcode, metaData.address.postcode, \"postcode\")\n    this._setElementValue(elements.state_territory, metaData.address.state, \"state_territory\")\n  }\n\n  _setElementValue(element, value, elementName){\n    if (!element) {\n      var errorMessage = 'AddressFinder Error: '\n                         + 'Attempted to update value for element that could not be found.\\n'\n                         + '\\nElement: ' + elementName\n                         + '\\nValue: ' + value;\n\n      if (window.console) {\n        console.warn(errorMessage);\n      }\n\n      return\n    }\n\n    /**\n     * The value tracker is checked on value state update and the tracker value must be different to the new value for it to apply.\n     * We are handling this by setting the tracker value to the previous value and then setting the new value.\n     * Reference:\n     * https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/react-dom/src/client/inputValueTracking.js#L115\n     *\n     * We need this to handle when the plugin is used on a React site as otherwise the React components will reset the form after population.\n     */\n    var previousValue = element.value;\n    element.value = value;\n    var tracker = element._valueTracker;\n    if (tracker) {\n      tracker.setValue(previousValue);\n    }\n\n    this._dispatchEvent(element)\n  }\n\n  /**\n   * This function dispatches an event when the form fields are set, so the store knows the fields have changed. This can affect form validation.\n   * Typically we would use a 'change' event here, but Shopify is listening for the 'input' event specifically, so we pass this.formFieldChangeEventToDispatch as a param.\n   * It is also important to set 'bubbles' to true, as the store may listen for the event on the document, rather than\n   * the input field itself. This allows the event to move up the tree, triggering the event on both the input element and the document.\n   */\n  _dispatchEvent(element) {\n    var event;\n    switch (typeof (Event)) {\n    case 'function':\n      event = new Event(this.formFieldChangeEventToDispatch, {\"bubbles\":true, \"cancelable\": false});\n      break;\n    default:\n      event = document.createEvent('Event');\n      event.initEvent(this.formFieldChangeEventToDispatch, true, false);\n    }\n    element.dispatchEvent(event);\n  }\n\n  _log(message, data=undefined){\n    if (this.widgetConfig.debug && window.console) {\n      if (data != undefined) {\n        console.log(`FormHelper for layout ${this.formHelperConfig.label}: ${message}`, data)\n      }\n      else {\n        console.log(`FormHelper for layout ${this.formHelperConfig.label}: ${message}`)\n      }\n    }\n  }\n}\n","import FormManager from \"./form_manager\"\n\nexport default class PageManager {\n  constructor({addressFormConfigurations, widgetConfig, formFieldChangeEventToDispatch, countryChangeEventToListenFor}) {\n\n    this.version = \"1.8.7\"\n\n    // Each formHelper is an instance of the FormManager class\n    this.formHelpers = []\n    // An object containing identifying information about an address form, such as the id values\n    this.countryElementWasPresent = false\n    // We want to keep a record of the county element ever being present, if it is detected and then disappears, we have to reload the widget\n    this.addressFormConfigurations = addressFormConfigurations\n    // Configuration provided by the user, such as keys and widget options\n    this.widgetConfig = widgetConfig\n    // When an address is selected dispatch this event on all the updated form fields. This tells the store the fields have been changed.\n    this.formFieldChangeEventToDispatch = formFieldChangeEventToDispatch\n    // An event listener with this event type is attached to country element. When the country changes the active country for the widget is set.\n    this.countryChangeEventToListenFor = countryChangeEventToListenFor\n\n    this.identifiedFormHelperConfig = []\n\n    this.reload = this.reload.bind(this)\n\n    this.loadFormHelpers()\n  }\n\n  // Takes the addressFormConfigurations (static and dynamic) provided by the ConfigManager and loads our formHelpers\n  reload(addressFormConfigurations) {\n    if (!this._areAllElementsStillInTheDOM() || this._newFormsIdentified(addressFormConfigurations)) {\n      this.identifiedFormHelperConfig = []\n      this.addressFormConfigurations = addressFormConfigurations\n      this.loadFormHelpers()\n    }\n  }\n\n  // We destroy and reset all our current helpers and configurations, then recreate them.\n  loadFormHelpers() {\n    this.formHelpers.forEach(formHelper => formHelper.destroy())\n    this.identifiedAddressFormConfigurations = []\n    this.formHelpers = []\n\n    this._identifyAddressForms()\n    this.identifiedAddressFormConfigurations.forEach(this._initialiseFormHelper.bind(this))\n  }\n\n  _getCurrentCountryValue(config) {\n    // If the user does not provide a country element, we set the current country value to the default\n    if(!config.countryElement) return this.widgetConfig.defaultCountry\n\n    let currentCountryCode = null\n    let countryCodes = ['nz', 'au', 'int']\n    countryCodes.forEach((countryCode) => {\n      let countryElementValue = config.countryElement.value\n      if (!countryElementValue && config.getCountryValue) {\n        countryElementValue = config.getCountryValue()\n      }\n\n      if (countryCode == 'int') {\n        if (config[countryCode].countryValue[countryElementValue]) {\n          currentCountryCode = config[countryCode].countryValue[countryElementValue]\n        }\n      } else {\n        if (countryElementValue === config[countryCode].countryValue) {\n          currentCountryCode = countryCode\n        }\n      }\n    })\n    return currentCountryCode\n  }\n\n  /**\n   * We only want to reload AddressFinder if a mutation has made a critical change to the DOM,\n   * for example if any of the elements have been removed. This function determines whether we have to reload.\n   * This improves performance for all our plugins, but it is critical for the Optimised One Page Checkout in BigCommerce,\n   * which triggers page mutations that would otherwise reload AddressFinder on every key press.\n   */\n  _areAllElementsStillInTheDOM(){\n    if (this.identifiedFormHelperConfig.length === 0) {\n      // if we have no config there are no relevant elements in the dom and we must reload.\n      return false\n    }\n\n    return this.identifiedFormHelperConfig.every((config) => {\n\n      if (!this._identifyingElementsPresentAndVisible(config)) {\n        /**\n         * if the layout selectors are missing, or hidden we must reload.\n         * Sometimes form fields are hidden with css rather than removed from the dom. This check handles this scenario so we can reinitalise.\n         */\n        return false\n      }\n\n      if (config.countryElement != null && !document.body.contains(config.countryElement) && this.countryElementWasPresent) {\n        /**\n         * if the country element is missing and was never present we must reload\n         * a null country element will give a false positive, so first we check that it is not null\n         */\n        return false\n      }\n\n      let currentCountryCode = this._getCurrentCountryValue(config)\n\n      // currentCountryCode will be null for non supported countries.\n      // return true to avoid continuously reloading the widget, which otherwise would be looking for elements associated with a null currentCountryCode.\n      if (currentCountryCode == null) { return true }\n\n      if (!this._areAllElementsStillInTheDOMForCountryCode(config, currentCountryCode)) {\n        // if the dom doesn't contain all the elements associated with the current country we must reload\n        return false\n      }\n\n      return true\n    })\n  }\n\n  _ignoreOptionalNullElements(config, countryCode) {\n    const filteredElements = {}\n\n    if (['au', 'nz'].includes(countryCode)) {\n      Object.entries(config[countryCode].elements).forEach(([key, element]) => {\n        // Some forms don't have the address_line_2 or suburb fields.\n        // We allow these fields to be missing without reloading the widget\n        if (!(config[countryCode].optionalElements.includes(key) && element === null)) {\n          filteredElements[key] = element\n        }\n      })\n    } else {\n      Object.entries(config['int'].elements).forEach(([key, element]) => {\n        // Some forms don't have the address_line_2 or suburb fields.\n        // We allow these fields to be missing without reloading the widget\n        if (!(config['int'].optionalElements[countryCode].includes(key) && element === null)) {\n          filteredElements[key] = element\n        }\n      })\n    }\n\n    return filteredElements\n  }\n\n  _areAllElementsStillInTheDOMForCountryCode(config, countryCode) {\n    if (!countryCode) { return false }\n\n    const requiredElements = this._ignoreOptionalNullElements(config, countryCode)\n\n    return Object.values(requiredElements).every((element) => {\n      return element !== null && document.body.contains(element)\n    })\n  }\n\n  _identifyingElementsPresentAndVisible(addressFormConfig) {\n    // layoutSelectors is an array of elements used to identify a form\n    return addressFormConfig.layoutSelectors.every((selector) => {\n      let element = document.querySelector(selector)\n      /**\n       * a selector must be present, and cannot be hidden.\n       * This allows us to only initialise AddressFinder for forms that are visible to the user.\n      */\n      return element !== null && element.style.display !== 'none'\n    })\n  }\n\n  // Checks if each of our form configs are present on the page\n  _identifyAddressForms(){\n    for (const addressFormConfig of this.addressFormConfigurations) {\n\n      if (this._identifyingElementsPresentAndVisible(addressFormConfig)) {\n        this.log(`Identified layout named: ${addressFormConfig.label}`)\n\n        this.identifiedAddressFormConfigurations.push(addressFormConfig)\n      }\n    }\n  }\n\n  // Checks if additional forms have been identified since last 'reload'.\n  _newFormsIdentified(addressFormConfigurations){\n    let identifiedForms = []\n\n    for (const addressFormConfig of addressFormConfigurations) {\n      if (this._identifyingElementsPresentAndVisible(addressFormConfig)) {\n        identifiedForms.push(addressFormConfig)\n      }\n    }\n\n    // returns true if additional forms have been identified.\n    // this will trigger a full reload of all the widgets for each form.\n    if (identifiedForms.length > this.identifiedAddressFormConfigurations.length) {\n      this.log(\"Identified addtional forms\")\n      return true\n    }\n\n    return false\n  }\n\n  // For each configuration, create a formHelperConfig. This maps our form configurations to the corresponding DOM elements.\n  _initialiseFormHelper(addressFormConfig){\n    let searchElement = document.querySelector(addressFormConfig.searchIdentifier)\n\n    if (searchElement && searchElement instanceof HTMLInputElement) {\n      let formHelperConfig = {\n        countryElement: document.querySelector(addressFormConfig.countryIdentifier),\n        searchElement: document.querySelector(addressFormConfig.searchIdentifier),\n        label: addressFormConfig.label,\n        layoutSelectors: addressFormConfig.layoutSelectors,\n        getCountryValue: addressFormConfig.getCountryValue,\n        nz: {\n          countryValue: addressFormConfig.nz.countryValue,\n          elements: {\n            address_line_1: document.querySelector(addressFormConfig.nz.elements.address1),\n            address_line_2: document.querySelector(addressFormConfig.nz.elements.address2),\n            suburb: document.querySelector(addressFormConfig.nz.elements.suburb),\n            city: document.querySelector(addressFormConfig.nz.elements.city),\n            region: document.querySelector(addressFormConfig.nz.elements.region),\n            postcode: document.querySelector(addressFormConfig.nz.elements.postcode)\n          },\n          regionMappings: addressFormConfig.nz.regionMappings,\n          optionalElements: ['address_line_2', 'suburb']\n        },\n        au: {\n          countryValue: addressFormConfig.au.countryValue,\n          elements: {\n            address_line_1: document.querySelector(addressFormConfig.au.elements.address1),\n            address_line_2: document.querySelector(addressFormConfig.au.elements.address2),\n            locality_name: document.querySelector(addressFormConfig.au.elements.suburb),\n            state_territory: document.querySelector(addressFormConfig.au.elements.state),\n            postcode: document.querySelector(addressFormConfig.au.elements.postcode)\n          },\n          stateMappings: addressFormConfig.au.stateMappings,\n          optionalElements: ['address_line_2']\n        },\n        int: {\n          countryValue: addressFormConfig.int.countryValue,\n          elements: {\n            address_line_1: document.querySelector(addressFormConfig.int.elements.address1),\n            address_line_2: document.querySelector(addressFormConfig.int.elements.address2),\n            locality_name: document.querySelector(addressFormConfig.int.elements.suburb),\n            state_territory: document.querySelector(addressFormConfig.int.elements.state),\n            postcode: document.querySelector(addressFormConfig.int.elements.postcode)\n          },\n          stateMappings: addressFormConfig.int.stateMappings,\n          optionalElements: addressFormConfig.int.optionalElements\n        }\n      }\n\n      this.identifiedFormHelperConfig.push(formHelperConfig)\n\n      // if the country element is present, we set countryElementWasPresent to true\n      if (formHelperConfig.countryElement != null && document.body.contains(formHelperConfig.countryElement)) {\n        this.countryElementWasPresent = true\n      }\n\n      let helper = new FormManager(this.widgetConfig, formHelperConfig, this.formFieldChangeEventToDispatch, this.countryChangeEventToListenFor)\n      this.formHelpers.push(helper)\n    }\n  }\n\n  log(message, data=undefined){\n    if (this.widgetConfig.debug && window.console) {\n      if (data != undefined) {\n        console.log(`${message}`, data)\n      }\n      else {\n        console.log(`${message}`)\n      }\n    }\n  }\n}\n","export default (state_field) => {\n  const element = document.querySelector(state_field)\n\n  const three_letter_mapping = {\n    'Auckland Region': 'AUK',\n    'Bay of Plenty Region': 'BOP',\n    'Canterbury Region': 'CAN',\n    'Gisborne Region': 'GIS',\n    'Hawke\\'s Bay Region': 'HKB',\n    'Manawatu-Wanganui Region': 'MWT',\n    'Marlborough Region': 'MBH',\n    'Nelson Region': 'NSN',\n    'Northland Region': 'NTL',\n    'Otago Region': 'OTA',\n    'Southland Region': 'STL',\n    'Taranaki Region': 'TKI',\n    'Tasman Region': 'TAS',\n    'Waikato Region': 'WKO',\n    'Wellington Region': 'WGN',\n    'West Coast Region': 'WTC',\n    'No Region (Chatham Islands)': null\n  };\n\n  const two_letter_mapping = {\n    'Auckland Region': 'AK',\n    'Bay of Plenty Region': 'BP',\n    'Canterbury Region': 'CT',\n    'Gisborne Region': 'GI',\n    'Hawke\\'s Bay Region': 'HB',\n    'Manawatu-Wanganui Region': 'MW',\n    'Marlborough Region': 'MB',\n    'Nelson Region': 'NS',\n    'Northland Region': 'NL',\n    'Otago Region': 'OT',\n    'Southland Region': 'SL',\n    'Taranaki Region': 'TK',\n    'Tasman Region': 'TM',\n    'Waikato Region': 'WA',\n    'Wellington Region': 'WE',\n    'West Coast Region': 'WC',\n    'No Region (Chatham Islands)': null\n  };\n\n  if (element && Array.from(element.querySelectorAll(\"option\")).map((el) => el.value).filter((val) => val.length > 0)[0]?.length == 2) {\n    return two_letter_mapping;\n  }\n\n  return three_letter_mapping;\n}\n","import regionMappings from './region_mappings'\n\nexport default {\n  label: \"Billing Checkout\",\n  layoutSelectors: [\"#billing_address_1\"],\n  countryIdentifier: '#billing_country',\n  searchIdentifier: '#billing_address_1',\n  nz: {\n    countryValue: \"NZ\",\n    elements: {\n      address1: '#billing_address_1',\n      address2: null,\n      suburb: '#billing_address_2',\n      city: '#billing_city',\n      region: '#billing_state',\n      postcode: '#billing_postcode',\n    },\n    regionMappings: regionMappings('#billing_state')\n  },\n  au: {\n    countryValue: \"AU\",\n    elements: {\n      address1: '#billing_address_1',\n      address2: '#billing_address_2',\n      suburb: '#billing_city',\n      state: '#billing_state',\n      postcode: '#billing_postcode',\n    },\n    stateMappings: null\n  },\n  int: {\n    countryValue: {'BE': 'be', 'CA': 'ca', 'CZ': 'cz', 'DE': 'de', 'FR': 'fr', 'DK': 'dk', 'IE': 'ie', 'NL': 'nl', 'PT': 'pt', 'SG': 'sg', 'ES': 'es', 'SE': 'se', 'GB': 'gb', 'US': 'us'},\n    elements: {\n      address1: '#billing_address_1',\n      address2: '#billing_address_2',\n      suburb: '#billing_city',\n      state: '#billing_state',\n      postcode: '#billing_postcode',\n    },\n    stateMappings: null,\n    optionalElements: {'be': ['address_line_2', 'state_territory'], 'ca': ['address_line_2'], 'cz': ['address_line_2'], 'de': ['address_line_2', 'state_territory'], 'fr': ['address_line_2'], 'dk': ['address_line_2'], 'ie': ['address_line_2'], 'nl': ['address_line_2', 'state_territory'], 'pt': ['address_line_2', 'state_territory'], 'sg': ['address_line_2', 'state_territory'], 'es': ['address_line_2'], 'se': ['address_line_2'], 'gb': ['address_line_2'], 'us': ['address_line_2']}\n  }\n}\n","import regionMappings from './region_mappings'\n\nexport default {\n  label: \"Shipping Checkout\",\n  layoutSelectors: [\"#shipping_address_1\"],\n  countryIdentifier: '#shipping_country',\n  searchIdentifier: '#shipping_address_1',\n  nz: {\n    countryValue: \"NZ\",\n    elements: {\n      address1: '#shipping_address_1',\n      address2: null,\n      suburb: '#shipping_address_2',\n      city: '#shipping_city',\n      region: '#shipping_state',\n      postcode: '#shipping_postcode',\n    },\n    regionMappings: regionMappings('#shipping_state')\n  },\n  au: {\n    countryValue: \"AU\",\n    elements: {\n      address1: '#shipping_address_1',\n      address2: '#shipping_address_2',\n      suburb: '#shipping_city',\n      state: '#shipping_state',\n      postcode: '#shipping_postcode',\n    },\n    stateMappings: null\n  },\n  int: {\n    countryValue: {'BE': 'be', 'CA': 'ca', 'CZ': 'cz', 'DE': 'de', 'FR': 'fr', 'DK': 'dk', 'IE': 'ie', 'NL': 'nl', 'PT': 'pt', 'SG': 'sg', 'ES': 'es', 'SE': 'se', 'GB': 'gb', 'US': 'us'},\n    elements: {\n      address1: '#shipping_address_1',\n      address2: '#shipping_address_2',\n      suburb: '#shipping_city',\n      state: '#shipping_state',\n      postcode: '#shipping_postcode',\n    },\n    stateMappings: null,\n    optionalElements: {'be': ['address_line_2', 'state_territory'], 'ca': ['address_line_2'], 'cz': ['address_line_2'], 'de': ['address_line_2', 'state_territory'], 'fr': ['address_line_2'], 'dk': ['address_line_2'], 'ie': ['address_line_2'], 'nl': ['address_line_2', 'state_territory'], 'pt': ['address_line_2', 'state_territory'], 'sg': ['address_line_2', 'state_territory'], 'es': ['address_line_2'], 'se': ['address_line_2', 'state_territory'], 'gb': ['address_line_2'], 'us': ['address_line_2']}\n  }\n}\n","import regionMappings from './region_mappings'\n\nexport default {\n  label: \"Block Shipping Checkout\",\n  layoutSelectors: [\"#shipping-address_1\"],\n  countryIdentifier: '#components-form-token-input-0',\n  searchIdentifier: '#shipping-address_1',\n  nz: {\n    countryValue: \"New Zealand\",\n    elements: {\n      address1: '#shipping-address_1',\n      address2: null,\n      suburb: '#shipping-address_2',\n      city: '#shipping-city',\n      region: '#components-form-token-input-1',\n      postcode: '#shipping-postcode',\n    },\n    regionMappings: regionMappings('#components-form-token-input-1')\n  },\n  au: {\n    countryValue: \"Australia\",\n    elements: {\n      address1: '#shipping-address_1',\n      address2: '#shipping-address_2',\n      suburb: '#shipping-city',\n      state: \"#components-form-token-input-1\",\n      postcode: '#shipping-postcode',\n    },\n    stateMappings: null\n  },\n  int: {\n    countryValue: {'Belgium': 'be', 'Canada': 'ca', 'Czechia': 'cz', 'Denmark': 'de', 'France': 'fr', 'Germany': 'dk', 'Ireland': 'ie', 'Netherlands': 'nl', 'Portugal': 'pt', 'Singapore': 'sg', 'Spain': 'es', 'Sweden': 'se', 'United Kingdom (UK)': 'gb', 'United States (US)': 'us'},\n    elements: {\n      address1: '#shipping-address_1',\n      address2: '#shipping-address_2',\n      suburb: '#shipping-city',\n      state: \"#components-form-token-input-1\",\n      postcode: '#shipping-postcode',\n    },\n    stateMappings: null,\n    // add link to addressfinder tools\n    optionalElements: {'be': ['address_line_2', 'state_territory'], 'ca': ['address_line_2'], 'cz': ['address_line_2'], 'de': ['address_line_2', 'state_territory'], 'fr': ['address_line_2'], 'dk': ['address_line_2'], 'ie': ['address_line_2'], 'nl': ['address_line_2', 'state_territory'], 'pt': ['address_line_2', 'state_territory'], 'sg': ['address_line_2', 'state_territory'], 'es': ['address_line_2'], 'se': ['address_line_2', 'state_territory'], 'gb': ['address_line_2'], 'us': ['address_line_2']}\n  },\n}\n","import regionMappings from './region_mappings'\n\nexport default {\n  label: \"Block Billing Checkout\",\n  layoutSelectors: [\"#billing-address_1\"],\n  countryIdentifier: '#components-form-token-input-2',\n  searchIdentifier: '#billing-address_1',\n  nz: {\n    countryValue: \"New Zealand\",\n    elements: {\n      address1: '#billing-address_1',\n      address2: null,\n      suburb: '#billing-address_2',\n      city: '#billing-city',\n      region: '#components-form-token-input-3',\n      postcode: '#billing-postcode',\n    },\n    regionMappings: regionMappings('#components-form-token-input-3')\n  },\n  au: {\n    countryValue: \"Australia\",\n    elements: {\n      address1: '#billing-address_1',\n      address2: '#billing-address_2',\n      suburb: '#billing-city',\n      state: '#components-form-token-input-3',\n      postcode: '#billing-postcode',\n    },\n    stateMappings: null\n  },\n  int: {\n    countryValue: {'Belgium': 'be', 'Canada': 'ca', 'Czechia': 'cz', 'Denmark': 'de', 'France': 'fr', 'Germany': 'dk', 'Ireland': 'ie', 'Netherlands': 'nl', 'Portugal': 'pt', 'Singapore': 'sg', 'Spain': 'es', 'Sweden': 'se', 'United Kingdom (UK)': 'gb', 'United States (US)': 'us'},\n    elements: {\n      address1: '#billing-address_1',\n      address2: '#billing-address_2',\n      suburb: '#billing-city',\n      state: '#components-form-token-input-3',\n      postcode: '#billing-postcode',\n    },\n    stateMappings: null,\n    // add link to addressfinder tools\n    optionalElements: {'be': ['address_line_2', 'state_territory'], 'ca': ['address_line_2'], 'cz': ['address_line_2'], 'de': ['address_line_2', 'state_territory'], 'fr': ['address_line_2'], 'dk': ['address_line_2'], 'ie': ['address_line_2'], 'nl': ['address_line_2', 'state_territory'], 'pt': ['address_line_2', 'state_territory'], 'sg': ['address_line_2', 'state_territory'], 'es': ['address_line_2'], 'se': ['address_line_2', 'state_territory'], 'gb': ['address_line_2'], 'us': ['address_line_2']}\n  }\n}\n","export default class FindBlockCheckoutIds {\n\n  findElements(addressFormConfigurations) {\n    let shippingCountry = this._getElementId('shipping-country')\n    let shippingState = this._getElementId('shipping-state') || \"#shipping-state\"\n    let billingCountry = this._getElementId('billing-country')\n    let billingState = this._getElementId('billing-state') || \"#billing-state\"\n\n    // Set the shipping and billing ids for the elements which are known to change on the block checkout.\n    addressFormConfigurations.forEach((configuration) => {\n      if (configuration.label == \"Block Shipping Checkout\") {\n        configuration.countryIdentifier = shippingCountry\n        configuration.nz.elements.region = shippingState\n        configuration.au.elements.state = shippingState\n        configuration.int.elements.state = shippingState\n      } else if (configuration.label == \"Block Billing Checkout\") {\n        configuration.countryIdentifier = billingCountry\n        configuration.nz.elements.region = billingState\n        configuration.au.elements.state = billingState\n        configuration.int.elements.state = billingState\n      }\n    });\n  }\n\n  _getElementId(parentId){\n    let parent = document.getElementById(parentId)\n\n    if (parent){\n      let inputs = parent.getElementsByTagName('input')\n\n      if (inputs.length == 1) {\n        return `#${inputs[0].id}`\n      }\n    }\n\n    return null\n  }\n}\n","import MutationManager from './mutation_manager'\nimport PageManager from './page_manager'\nimport ConfigManager from './config_manager'\n\n(function (d, w) {\n  class WooCommercePlugin {\n    constructor() {\n\n      this.version = \"1.6.3\"\n\n      // Manages the mapping of the form configurations to the DOM.\n      this.PageManager = null\n\n      // Manages the form configurations, and creates any dynamic forms\n      this.ConfigManager = null\n\n      this._initPlugin = this._initPlugin.bind(this)\n\n      this.addressfinderDebugMode = this.addressfinderDebugMode.bind(this)\n      w.addressfinderDebugMode = this.addressfinderDebugMode\n\n      this._initOnDOMLoaded()\n    }\n\n    mutationEventHandler() {\n      // When the form mutates, reload our form configurations, and reload the form helpers in the page manager.\n      let addressFormConfigurations = this.ConfigManager.load()\n      if (this.PageManager) {\n        this.PageManager.reload(addressFormConfigurations)\n      }\n    }\n\n    _safeParseJSONObject(jsonObject) {\n      if (jsonObject == undefined) {\n        return null;\n      }\n\n      try {\n        jsonObject = JSON.parse(jsonObject);\n      } catch (e) {\n        if (w.AddressFinderConfig.debug) {\n          alert('Invalid widget option: ' + jsonObject);\n        }\n\n        return null;\n      }\n\n      return jsonObject;\n    }\n\n    _initOnDOMLoaded(event, repetitions) {\n      // In WooCommerce/Wordpress a country change event is fired during the DOM loading process.\n      // If AddressFinder is added before this event it will clear the user's existing address details from the address fields.\n      // This function makes sure AddressFinder is initalised after this event.\n\n      repetitions = repetitions || 10\n\n      if (d.readyState == \"complete\" && typeof w.AddressFinder != 'undefined') {\n        setTimeout(() => {\n          console.log('ready state')\n          this._initPlugin()\n        }, 1000)\n        return\n      }\n\n      if (repetitions == 0) {\n        // if 5 seconds have passed and the DOM still isn't ready, initalise AddressFinder\n        console.log('repetition zero')\n        this._initPlugin()\n        return\n      }\n\n      setTimeout(() => {\n        // if less than 5 seconds have passed and the DOM isn't ready, recall the function to check again\n        this._initOnDOMLoaded('ignoredEvent', repetitions - 1)\n      }, 1000)\n    }\n\n    _initPlugin() {\n      let parsedWidgetOptions = this._safeParseJSONObject(w.AddressFinderConfig.widget_options);\n      let parsedNZWidgetOptions = this._safeParseJSONObject(w.AddressFinderConfig.nz_widget_options);\n      let parsedAUWidgetOptions = this._safeParseJSONObject(w.AddressFinderConfig.au_widget_options);\n\n      const widgetConfig = {\n        nzKey: w.AddressFinderConfig.key_nz || w.AddressFinderConfig.key || w.AddressFinderConfig.key_au,\n        auKey: w.AddressFinderConfig.key_au || w.AddressFinderConfig.key || w.AddressFinderConfig.key_nz,\n        nzWidgetOptions: parsedNZWidgetOptions || parsedWidgetOptions || {},\n        auWidgetOptions: parsedAUWidgetOptions || parsedWidgetOptions || {},\n        defaultCountry: w.AddressFinderConfig.default_country || 'nz',\n        debug: w.AddressFinderConfig.debug || false\n      }\n\n      this.ConfigManager = new ConfigManager()\n\n      // Watches for any mutations to the DOM, so we can reload our configurations when something changes.\n      new MutationManager({\n        widgetConfig: widgetConfig,\n        mutationEventHandler: this.mutationEventHandler.bind(this),\n        ignoredClass: \"af_list\"\n      })\n\n      this.PageManager = new PageManager({\n        addressFormConfigurations: this.ConfigManager.load(),\n        widgetConfig,\n        // When an address is selected dispatch this event on all the updated form fields. This tells the store the fields have been changed.\n        formFieldChangeEventToDispatch: 'change',\n        // An event listener with this event type is attached to country element. When the country changes the active country for the widget is set.\n        countryChangeEventToListenFor: 'blur'\n      })\n\n      this._setVersionNumbers()\n\n      w.AddressFinder._woocommercePlugin = this.PageManager\n    }\n\n    _setVersionNumbers() {\n      // rename webpage tools version from 'version' to 'webpageToolsVersion'\n      this.PageManager['webpageToolsVersion'] = this.PageManager.version\n      this.PageManager.version = this.version\n    }\n\n    /*\n    * When addressfinderDebugMode() is typed into the Javascript console the plugin will be reinitialised with debug set to true.\n    * This allows us to debug more easily on customer sites.\n    */\n    addressfinderDebugMode() {\n      w.AddressFinderConfig.debug = true\n      this._initPlugin()\n    }\n  }\n\n  var s = d.createElement('script')\n  s.src = 'https://api.addressfinder.io/assets/v3/widget.js'\n  s.async = 1;\n  s.onload = function () { new WooCommercePlugin }\n  d.body.appendChild(s)\n\n})(document, window)\n","import billingAddress from './address_form_config/billing_address'\nimport shippingAddress from './address_form_config/shipping_address'\nimport blockShippingAddress from './address_form_config/block_shipping_address'\nimport blockBillingAddress from './address_form_config/block_billing_address'\nimport FindBlockCheckoutIds from './address_form_config/find_block_checkout_ids'\n\nexport default class ConfigManager {\n\n  constructor(){\n    this.FindBlockCheckoutIds = new FindBlockCheckoutIds()\n  }\n\n  load() {\n    // This function is called when the page mutates and returns our form configurations\n    const addressFormConfigurations = [\n      shippingAddress,\n      billingAddress,\n      blockShippingAddress,\n      blockBillingAddress\n    ]\n\n    // The block checkout input fields have different id's depending on:\n    // - country selected\n    // - on form create/destroy\n    this.FindBlockCheckoutIds.findElements(addressFormConfigurations)\n\n    return addressFormConfigurations\n  }\n}\n"],"sourceRoot":""}